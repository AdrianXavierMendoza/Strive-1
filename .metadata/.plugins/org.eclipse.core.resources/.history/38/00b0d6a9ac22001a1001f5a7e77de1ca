package com.noraokeeffe.strive.controllers;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.noraokeeffe.strive.models.Goal;
import com.noraokeeffe.strive.models.User;
import com.noraokeeffe.strive.models.UserExpense;
import com.noraokeeffe.strive.services.GoalService;
import com.noraokeeffe.strive.services.UserExpenseService;
import com.noraokeeffe.strive.services.UserService;

@Controller
public class UserController {
	private final UserService userService;
	private final GoalService goalService;
	private final UserExpenseService userExpenseService;
	
	public UserController(UserService userService, GoalService goalService, UserExpenseService userExpenseService) {
		this.userService = userService;
		this.goalService = goalService;
		this.userExpenseService = userExpenseService;
	}
	
	@RequestMapping("/")
	public String index() {
		return "strive/index.jsp";
	}
	
	@RequestMapping("/register")
	public String registrationPage(@ModelAttribute("user") User user) {
		return "strive/register.jsp";
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	 public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result, HttpSession session, RedirectAttributes attribute) {
		 if (result.hasErrors()) {
	          return "strive/register.jsp";
	     }
	     else if(!user.getPassword().equals(user.getPasswordConfirmation())) {
	         attribute.addFlashAttribute("pw_error", "Passwords do not match");
	         return "redirect:/register";
	         
	     }else if(userService.checkUser(user.getEmail())) {
	         attribute.addFlashAttribute("error", "User already exists");
	         return "redirect:/registration";
	     }else {
	         User new_user = userService.registerUser(user);
	         session.setAttribute("loggedIn", user);
	         session.setAttribute("user_id", new_user.getId());
	         return "redirect:/home" ;
	     }
	 }
	
	@RequestMapping("/login")
	public String loginPage() {
		return "strive/login.jsp";
	}
	
	 @RequestMapping(value="/login", method=RequestMethod.POST)
	 public String loginUser(@RequestParam("email") String email, @RequestParam("password") String password, Model model, HttpSession session) {
	     // if the user is authenticated, save their user id in session
	     // else, add error messages and return the login page
		 if(password.isEmpty() || email.isEmpty()) {
			model.addAttribute("error","Fields cannot be blank");
			return "loginPage.jsp";
		 }
		 User user = userService.findByEmail(email);
		 System.out.println(user);
		 if (user == null) {
			 model.addAttribute("error","No such User");
		 }
		 else if (!userService.authenticateUser(email, password)) {
			 model.addAttribute("error","Invalid Password");
		 }
		 else {
			 session.setAttribute("user_id", user.getId());
			 return "redirect:/home";
		 }
		 return "loginPage.jsp";
	 }
	
	@RequestMapping("/home")
	public String userHomePage(HttpSession session, Model model) {
		 Long userId = (Long) session.getAttribute("user_id");
		 if (userId != null) {
			 model.addAttribute("user", userService.findUserById(userId));
		 }
		return "strive/userHome.jsp";
	}
		

	@RequestMapping("/updateFinances")
	public String iePage(HttpSession session, Model model, @ModelAttribute("userExpense") UserExpense user_expense ) {
		Long userId = (Long) session.getAttribute("user_id");
		model.addAttribute("user", userService.findUserById(userId));
		return "strive/ie.jsp";
	}

	
	@RequestMapping(value="/addUserExpense", method= RequestMethod.POST)
	public String addUserExpense(@Valid @ModelAttribute("userExpense") UserExpense user_expense, BindingResult result, Model model, HttpSession session) {
		if(result.hasErrors()) {
			return userHomePage(session, model);
		}else {
			userExpenseService.createUserExpense(user_expense);
			return "redirect:/updateFinances";
		}
	}
	
	@RequestMapping(value="/updateFinances", method= RequestMethod.POST)
	public String updateUserFinances(@Valid @RequestParam("currentBalance") Double currentBalance, @RequestParam("currentIncome") Double currentIncome, HttpSession session, Model model) {
		Long userId = (Long) session.getAttribute("user_id");
		userService.findUserById(userId).setCurrentBalance(currentBalance);
		userService.findUserById(userId).setCurrentIncome(currentIncome);
		return "redirect:/home";
	}

	

	
	
	
}
